{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,YCHTC,G,MAAW,SAAAP,GAEtB,OADAQ,QAAQC,IAAIT,GAEV,qBAAKC,UAAU,YAAf,SACGD,EAAMU,SAASC,KAAI,SAAAR,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLdQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAAmC,uBAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCkCzHG,G,wDAhCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA3BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.efce0e25.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n)\r\n","import React from 'react'\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => {\r\n  console.log(props)\r\n  return (\r\n    <div className='card-list'>\r\n      {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\r\n","import { Component } from 'react'\nimport { CardList } from './components/card-list/card-list.component.jsx'\nimport { SearchBox } from './components/search-box/search-box.component.jsx'\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// .If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}